import React from 'react';
import type { PressEvents, PressEvent, FocusableProps } from '@react-types/shared';
import type { ReactRef } from './../utils/refs';
import type { NormalWeights, CardVariants } from './../utils/prop-types';
interface Props extends PressEvents, FocusableProps {
    ref: ReactRef<HTMLDivElement | null>;
    variant?: CardVariants;
    borderWeight?: NormalWeights;
    isPressable?: boolean;
    isHoverable?: boolean;
    disableRipple?: boolean;
    disableAnimation?: boolean;
}
declare type NativeAttrs = Omit<React.HTMLAttributes<unknown>, keyof Props>;
export declare type UseCardProps = Props & NativeAttrs;
/**
 * @internal
 */
export declare const useCard: (props: UseCardProps) => {
    onPressStart?: ((e: PressEvent) => void) | undefined;
    onPressEnd?: ((e: PressEvent) => void) | undefined;
    onPressChange?: ((isPressed: boolean) => void) | undefined;
    onPressUp?: ((e: PressEvent) => void) | undefined;
    onFocus?: ((e: React.FocusEvent<Element, Element>) => void) | undefined;
    onBlur?: ((e: React.FocusEvent<Element, Element>) => void) | undefined;
    onFocusChange?: ((isFocused: boolean) => void) | undefined;
    onKeyDown?: ((e: import("@react-types/shared").KeyboardEvent) => void) | undefined;
    onKeyUp?: ((e: import("@react-types/shared").KeyboardEvent) => void) | undefined;
    slot?: string | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    color?: string | undefined;
    translate?: "yes" | "no" | undefined;
    hidden?: boolean | undefined;
    className?: string | undefined;
    children?: React.ReactNode;
    dir?: string | undefined;
    id?: string | undefined;
    onChange?: React.FormEventHandler<unknown> | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | readonly string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
    contextMenu?: string | undefined;
    draggable?: (boolean | "true" | "false") | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    spellCheck?: (boolean | "true" | "false") | undefined;
    tabIndex?: number | undefined;
    radioGroup?: string | undefined;
    role?: React.AriaRole | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: (boolean | "true" | "false") | undefined;
    'aria-autocomplete'?: "none" | "inline" | "both" | "list" | undefined;
    'aria-busy'?: (boolean | "true" | "false") | undefined;
    'aria-checked'?: boolean | "mixed" | "true" | "false" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "time" | "page" | "true" | "false" | "step" | "location" | "date" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-disabled'?: (boolean | "true" | "false") | undefined;
    'aria-dropeffect'?: "none" | "link" | "copy" | "move" | "execute" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: (boolean | "true" | "false") | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: (boolean | "true" | "false") | undefined;
    'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "true" | "false" | "tree" | undefined;
    'aria-hidden'?: (boolean | "true" | "false") | undefined;
    'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: (boolean | "true" | "false") | undefined;
    'aria-multiline'?: (boolean | "true" | "false") | undefined;
    'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
    'aria-orientation'?: "horizontal" | "vertical" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "true" | "false" | undefined;
    'aria-readonly'?: (boolean | "true" | "false") | undefined;
    'aria-relevant'?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    'aria-required'?: (boolean | "true" | "false") | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: (boolean | "true" | "false") | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: React.ClipboardEventHandler<unknown> | undefined;
    onCopyCapture?: React.ClipboardEventHandler<unknown> | undefined;
    onCut?: React.ClipboardEventHandler<unknown> | undefined;
    onCutCapture?: React.ClipboardEventHandler<unknown> | undefined;
    onPaste?: React.ClipboardEventHandler<unknown> | undefined;
    onPasteCapture?: React.ClipboardEventHandler<unknown> | undefined;
    onCompositionEnd?: React.CompositionEventHandler<unknown> | undefined;
    onCompositionEndCapture?: React.CompositionEventHandler<unknown> | undefined;
    onCompositionStart?: React.CompositionEventHandler<unknown> | undefined;
    onCompositionStartCapture?: React.CompositionEventHandler<unknown> | undefined;
    onCompositionUpdate?: React.CompositionEventHandler<unknown> | undefined;
    onCompositionUpdateCapture?: React.CompositionEventHandler<unknown> | undefined;
    onFocusCapture?: React.FocusEventHandler<unknown> | undefined;
    onBlurCapture?: React.FocusEventHandler<unknown> | undefined;
    onChangeCapture?: React.FormEventHandler<unknown> | undefined;
    onBeforeInput?: React.FormEventHandler<unknown> | undefined;
    onBeforeInputCapture?: React.FormEventHandler<unknown> | undefined;
    onInput?: React.FormEventHandler<unknown> | undefined;
    onInputCapture?: React.FormEventHandler<unknown> | undefined;
    onReset?: React.FormEventHandler<unknown> | undefined;
    onResetCapture?: React.FormEventHandler<unknown> | undefined;
    onSubmit?: React.FormEventHandler<unknown> | undefined;
    onSubmitCapture?: React.FormEventHandler<unknown> | undefined;
    onInvalid?: React.FormEventHandler<unknown> | undefined;
    onInvalidCapture?: React.FormEventHandler<unknown> | undefined;
    onLoad?: React.ReactEventHandler<unknown> | undefined;
    onLoadCapture?: React.ReactEventHandler<unknown> | undefined;
    onError?: React.ReactEventHandler<unknown> | undefined;
    onErrorCapture?: React.ReactEventHandler<unknown> | undefined;
    onKeyDownCapture?: React.KeyboardEventHandler<unknown> | undefined;
    onKeyPress?: React.KeyboardEventHandler<unknown> | undefined;
    onKeyPressCapture?: React.KeyboardEventHandler<unknown> | undefined;
    onKeyUpCapture?: React.KeyboardEventHandler<unknown> | undefined;
    onAbort?: React.ReactEventHandler<unknown> | undefined;
    onAbortCapture?: React.ReactEventHandler<unknown> | undefined;
    onCanPlay?: React.ReactEventHandler<unknown> | undefined;
    onCanPlayCapture?: React.ReactEventHandler<unknown> | undefined;
    onCanPlayThrough?: React.ReactEventHandler<unknown> | undefined;
    onCanPlayThroughCapture?: React.ReactEventHandler<unknown> | undefined;
    onDurationChange?: React.ReactEventHandler<unknown> | undefined;
    onDurationChangeCapture?: React.ReactEventHandler<unknown> | undefined;
    onEmptied?: React.ReactEventHandler<unknown> | undefined;
    onEmptiedCapture?: React.ReactEventHandler<unknown> | undefined;
    onEncrypted?: React.ReactEventHandler<unknown> | undefined;
    onEncryptedCapture?: React.ReactEventHandler<unknown> | undefined;
    onEnded?: React.ReactEventHandler<unknown> | undefined;
    onEndedCapture?: React.ReactEventHandler<unknown> | undefined;
    onLoadedData?: React.ReactEventHandler<unknown> | undefined;
    onLoadedDataCapture?: React.ReactEventHandler<unknown> | undefined;
    onLoadedMetadata?: React.ReactEventHandler<unknown> | undefined;
    onLoadedMetadataCapture?: React.ReactEventHandler<unknown> | undefined;
    onLoadStart?: React.ReactEventHandler<unknown> | undefined;
    onLoadStartCapture?: React.ReactEventHandler<unknown> | undefined;
    onPause?: React.ReactEventHandler<unknown> | undefined;
    onPauseCapture?: React.ReactEventHandler<unknown> | undefined;
    onPlay?: React.ReactEventHandler<unknown> | undefined;
    onPlayCapture?: React.ReactEventHandler<unknown> | undefined;
    onPlaying?: React.ReactEventHandler<unknown> | undefined;
    onPlayingCapture?: React.ReactEventHandler<unknown> | undefined;
    onProgress?: React.ReactEventHandler<unknown> | undefined;
    onProgressCapture?: React.ReactEventHandler<unknown> | undefined;
    onRateChange?: React.ReactEventHandler<unknown> | undefined;
    onRateChangeCapture?: React.ReactEventHandler<unknown> | undefined;
    onSeeked?: React.ReactEventHandler<unknown> | undefined;
    onSeekedCapture?: React.ReactEventHandler<unknown> | undefined;
    onSeeking?: React.ReactEventHandler<unknown> | undefined;
    onSeekingCapture?: React.ReactEventHandler<unknown> | undefined;
    onStalled?: React.ReactEventHandler<unknown> | undefined;
    onStalledCapture?: React.ReactEventHandler<unknown> | undefined;
    onSuspend?: React.ReactEventHandler<unknown> | undefined;
    onSuspendCapture?: React.ReactEventHandler<unknown> | undefined;
    onTimeUpdate?: React.ReactEventHandler<unknown> | undefined;
    onTimeUpdateCapture?: React.ReactEventHandler<unknown> | undefined;
    onVolumeChange?: React.ReactEventHandler<unknown> | undefined;
    onVolumeChangeCapture?: React.ReactEventHandler<unknown> | undefined;
    onWaiting?: React.ReactEventHandler<unknown> | undefined;
    onWaitingCapture?: React.ReactEventHandler<unknown> | undefined;
    onAuxClick?: React.MouseEventHandler<unknown> | undefined;
    onAuxClickCapture?: React.MouseEventHandler<unknown> | undefined;
    onClickCapture?: React.MouseEventHandler<unknown> | undefined;
    onContextMenu?: React.MouseEventHandler<unknown> | undefined;
    onContextMenuCapture?: React.MouseEventHandler<unknown> | undefined;
    onDoubleClick?: React.MouseEventHandler<unknown> | undefined;
    onDoubleClickCapture?: React.MouseEventHandler<unknown> | undefined;
    onDrag?: React.DragEventHandler<unknown> | undefined;
    onDragCapture?: React.DragEventHandler<unknown> | undefined;
    onDragEnd?: React.DragEventHandler<unknown> | undefined;
    onDragEndCapture?: React.DragEventHandler<unknown> | undefined;
    onDragEnter?: React.DragEventHandler<unknown> | undefined;
    onDragEnterCapture?: React.DragEventHandler<unknown> | undefined;
    onDragExit?: React.DragEventHandler<unknown> | undefined;
    onDragExitCapture?: React.DragEventHandler<unknown> | undefined;
    onDragLeave?: React.DragEventHandler<unknown> | undefined;
    onDragLeaveCapture?: React.DragEventHandler<unknown> | undefined;
    onDragOver?: React.DragEventHandler<unknown> | undefined;
    onDragOverCapture?: React.DragEventHandler<unknown> | undefined;
    onDragStart?: React.DragEventHandler<unknown> | undefined;
    onDragStartCapture?: React.DragEventHandler<unknown> | undefined;
    onDrop?: React.DragEventHandler<unknown> | undefined;
    onDropCapture?: React.DragEventHandler<unknown> | undefined;
    onMouseDown?: React.MouseEventHandler<unknown> | undefined;
    onMouseDownCapture?: React.MouseEventHandler<unknown> | undefined;
    onMouseEnter?: React.MouseEventHandler<unknown> | undefined;
    onMouseLeave?: React.MouseEventHandler<unknown> | undefined;
    onMouseMove?: React.MouseEventHandler<unknown> | undefined;
    onMouseMoveCapture?: React.MouseEventHandler<unknown> | undefined;
    onMouseOut?: React.MouseEventHandler<unknown> | undefined;
    onMouseOutCapture?: React.MouseEventHandler<unknown> | undefined;
    onMouseOver?: React.MouseEventHandler<unknown> | undefined;
    onMouseOverCapture?: React.MouseEventHandler<unknown> | undefined;
    onMouseUp?: React.MouseEventHandler<unknown> | undefined;
    onMouseUpCapture?: React.MouseEventHandler<unknown> | undefined;
    onSelect?: React.ReactEventHandler<unknown> | undefined;
    onSelectCapture?: React.ReactEventHandler<unknown> | undefined;
    onTouchCancel?: React.TouchEventHandler<unknown> | undefined;
    onTouchCancelCapture?: React.TouchEventHandler<unknown> | undefined;
    onTouchEnd?: React.TouchEventHandler<unknown> | undefined;
    onTouchEndCapture?: React.TouchEventHandler<unknown> | undefined;
    onTouchMove?: React.TouchEventHandler<unknown> | undefined;
    onTouchMoveCapture?: React.TouchEventHandler<unknown> | undefined;
    onTouchStart?: React.TouchEventHandler<unknown> | undefined;
    onTouchStartCapture?: React.TouchEventHandler<unknown> | undefined;
    onPointerDown?: React.PointerEventHandler<unknown> | undefined;
    onPointerDownCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerMove?: React.PointerEventHandler<unknown> | undefined;
    onPointerMoveCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerUp?: React.PointerEventHandler<unknown> | undefined;
    onPointerUpCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerCancel?: React.PointerEventHandler<unknown> | undefined;
    onPointerCancelCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerEnter?: React.PointerEventHandler<unknown> | undefined;
    onPointerEnterCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerLeave?: React.PointerEventHandler<unknown> | undefined;
    onPointerLeaveCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerOver?: React.PointerEventHandler<unknown> | undefined;
    onPointerOverCapture?: React.PointerEventHandler<unknown> | undefined;
    onPointerOut?: React.PointerEventHandler<unknown> | undefined;
    onPointerOutCapture?: React.PointerEventHandler<unknown> | undefined;
    onGotPointerCapture?: React.PointerEventHandler<unknown> | undefined;
    onGotPointerCaptureCapture?: React.PointerEventHandler<unknown> | undefined;
    onLostPointerCapture?: React.PointerEventHandler<unknown> | undefined;
    onLostPointerCaptureCapture?: React.PointerEventHandler<unknown> | undefined;
    onScroll?: React.UIEventHandler<unknown> | undefined;
    onScrollCapture?: React.UIEventHandler<unknown> | undefined;
    onWheel?: React.WheelEventHandler<unknown> | undefined;
    onWheelCapture?: React.WheelEventHandler<unknown> | undefined;
    onAnimationStart?: React.AnimationEventHandler<unknown> | undefined;
    onAnimationStartCapture?: React.AnimationEventHandler<unknown> | undefined;
    onAnimationEnd?: React.AnimationEventHandler<unknown> | undefined;
    onAnimationEndCapture?: React.AnimationEventHandler<unknown> | undefined;
    onAnimationIteration?: React.AnimationEventHandler<unknown> | undefined;
    onAnimationIterationCapture?: React.AnimationEventHandler<unknown> | undefined;
    onTransitionEnd?: React.TransitionEventHandler<unknown> | undefined;
    onTransitionEndCapture?: React.TransitionEventHandler<unknown> | undefined;
    cardRef: React.RefObject<HTMLDivElement>;
    variant: "flat" | "shadow" | "bordered";
    borderWeight: "light" | "normal" | "bold" | "extrabold" | "black";
    isPressable: boolean;
    isHovered: boolean;
    isPressed: boolean;
    disableAnimation: boolean;
    disableRipple: boolean;
    pressProps: React.HTMLAttributes<HTMLElement>;
    hoverProps: React.HTMLAttributes<HTMLElement>;
    dripBindings: {
        visible: boolean;
        x: number;
        y: number;
        onCompleted: () => void;
    };
    focusProps: Omit<React.HTMLAttributes<HTMLElement>, "css">;
    onDripClickHandler: (event: React.MouseEvent<HTMLElement, MouseEvent> | PressEvent) => void;
    isFocusVisible: boolean;
};
export declare type UseCardReturn = ReturnType<typeof useCard>;
export {};
